<template>
    <div class="business">
        <div class="nav">
            <div class="img"><img src="../../assets/img/topBar/paiHangBang@2x.png" alt=""></div>
            <div class="quotat_tab">
                <div class="tab-item" v-for="(item,index) in tabList" v-model="debtLibraryTabIndex"
                     v-bind:class="{active:(currentIndex == index)}" @click="onItemClick(index)">
                  <span class="tab-link">{{item}}</span>
                </div>
            </div>
            <div class="img"><img src="../../assets/img/topBar/icon_message@2x.png"></div>
        </div>

      <!--自选-->
      <div id="mescroll0" class="mescroll" v-show="currentIndex==0">
        <div id="dataList0">
						<dynamicTemp></dynamicTemp>
        </div>
      </div>
      <!--全部-->
      <div id="mescroll1" class="mescroll" v-show="currentIndex==1">
        <div id="dataList1">

        </div>
      </div>
      <!--艺人-->
      <div id="mescroll2" class="mescroll" v-show="currentIndex==2">
        <div id="dataList2">

        </div>
      </div>
      <!--模特-->
      <div id="mescroll3" class="mescroll" v-show="currentIndex==3">
        <div id="dataList3">

        </div>
      </div>
    </div>
</template>

<script>
  import MeScroll from 'mescroll.js'
	import dynamicTemp from './../public/dynamic_temp'
    export default {
        name: "business",
				components:{
        		dynamicTemp,
				},
      data(){
          return {
            tabList:['买入','卖出','持仓','订单'],
            debtLibraryTabIndex: 0,
            currentIndex: 0,
            mescrollArr: new Array(4),
            newsList0: [],
            newsList1: [],
            newsList2: [],
            newsList3: [],
            mescroll: '',
          }
      },
      mounted(){
        //初始化首页
        this.mescrollArr[0] = this.initMescroll("mescroll0", "dataList0");
      },
      methods:{
        onItemClick(index) {
          if (this.currentIndex != index) {
            this.currentIndex = index;
            if (this.mescrollArr[index] == null) {
              this.mescrollArr[index] = this.initMescroll("mescroll" + index, "dataList" + index);
            }
          }
        },
        initMescroll(mescrollId, clearEmptyId) {
          //创建MeScroll对象,内部已默认开启下拉刷新,自动执行up.callback,刷新列表数据;
          let mescroll = new MeScroll(mescrollId, {
            //上拉加载的配置项
            up: {
              callback: this.getListData, //上拉回调,此处可简写; 相当于 callback: function (page) { getListData(page); }
              isBounce: false, //是否允许ios的bounce回弹;默认true,允许回弹; 此处配置为false,可解决微信,QQ,Safari等等iOS浏览器列表顶部下拉和底部上拉露出浏览器灰色背景和卡顿2秒的问题
              page: {
                num: 0, //当前页 默认0,回调之前会加1; 即callback(page)会从1开始
                size: 10, //每页数据条数
                time: null //加载第一页数据服务器返回的时间; 防止用户翻页时,后台新增了数据从而导致下一页数据重复;
              },
              noMoreSize: 4, //如果列表已无数据,可设置列表的总数量要大于半页才显示无更多数据;避免列表数据过少(比如只有一条数据),显示无更多数据会不好看; 默认5
              empty: {
                warpId: clearEmptyId,
                icon: "", //图标,默认null
                tip: "暂无数据...", //提示
                // btntext: "去逛逛 >", //按钮,默认""
                // btnClick: function () {//点击按钮的回调,默认null
                // 	alert("点击了按钮,具体逻辑自行实现");
                // }
              },
              // clearEmptyId: clearEmptyId, //相当于同时设置了clearId和empty.warpId; 简化写法;默认null
              // toTop: { //配置回到顶部按钮
              // 	src: ToTopImg, //默认滚动到1000px显示,可配置offset修改
              // },
              htmlNodata: '<p class="upwarp-nodata">-- 没有更多数据 --</p>', //无数据的布局
            },
            down: {
              isLock: true
            },
          });
          return mescroll;
        },
        getListData(page) {
          //联网加载数据
          var self = this;
          var dataIndex = this.currentIndex; //记录当前联网的nav下标,防止快速切换时,联网回来curNavIndex已经改变的情况;
          this.getListDataFromNet(dataIndex, page.num, page.size, function (pageData) {
            // console.log("dataIndex=" + dataIndex + ", curNavIndex=" + self.currentIndex + ", page.num=" + page.num + ", page.size=" + page.size + ", pageData.length=" + pageData.length);
            self.mescrollArr[dataIndex].endSuccess(pageData.length);
            self.setListData(pageData, dataIndex, page);
          }, function () {
            //联网失败的回调,隐藏下拉刷新和上拉加载的状态;
            self.mescrollArr[dataIndex].endErr();
          });
        },
        /*设置列表数据
               * pageData 当前页的数据
               * dataIndex 数据属于哪个nav */
        setListData(pageData, dataIndex, page) {
          //更新列表数据
          switch (dataIndex) {
            case 0:
              if (page.num == 1) this.newsList0 = [];
              this.newsList0 = this.newsList0.concat(pageData);
              break;
            case 1:
              if (page.num == 1) this.newsList1 = [];
              this.newsList1 = this.newsList1.concat(pageData);
              break;
            case 2:
              if (page.num == 1) this.newsList1 = [];
              this.newsList1 = this.newsList1.concat(pageData);
              break;
            case 3:
              if (page.num == 1) this.newsList1 = [];
              this.newsList1 = this.newsList1.concat(pageData);
              break;
            case 4:
              if (page.num == 1) this.newsList1 = [];
              this.newsList1 = this.newsList1.concat(pageData);
              break;
          }
        },
        /*联网加载列表数据*/
        getListDataFromNet(curNavIndex, pageNum, pageSize, successCallback, errorCallback) {
          // debugger;
          //延时一秒,模拟联网
          let that = this;
          // setTimeout(() => {
          var listData = []

          /* that.$axios.get("").then((data) => {
             let res = data.data
             if (res.code === 200) {
               listData = res.data*/
          successCallback && successCallback(listData);
          /*} else {

          }
        }, () => {
          errorCallback
        }).catch(err => {
          errorCallback()
        })
      }, 500)*/
        }
      }
    }
</script>

<style scoped lang="scss">
  $color:#ff5558;
  .business{
    .nav{
      height: .5rem;
      background: #ff5558;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 .1rem;
      img{
        width: .25rem;
        height: .25rem;
      }
    }
    .quotat_tab {
      height: .4rem;
      line-height: .4rem;
      display: flex;
      .tab-item {
        width:.6rem;
        text-align: center;
        font-size: .14rem;
        .tab-link {
          display: inline-block;
          height: .3rem;
          line-height: .3rem;
          color:rgba(255,255,255,0.5);
        }

      }
      .active{
        .tab-link{
          color:rgba(255,255,255,1);
        }
      }
    }
  }
</style>
