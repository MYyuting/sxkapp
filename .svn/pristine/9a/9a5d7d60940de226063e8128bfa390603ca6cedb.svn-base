<template>
		<!--时间商品订单-->
    <div class="timeD">
				<Head :text="til"></Head>
				<div id="mescroll" class="mescroll">
						<!--没有数据的时候-->
						<div class="nothing" v-show="flag">
								<div>
										<img src="../../../assets/img/state/order@2x.png" alt="">
										<p>您还没有相关的订单</p>
								</div>
						</div>

						<!--有数据-->
						<div class="listCon">
								<div class="list" v-for="(item,index) in dataList">
										<div class="listTop" @click="listClick(index)">
												<div class="left">
														<img :src="item.investorsAvatar" alt="">
														<div>
																<p>{{item.investorsName}} {{item.investorsCode}}</p>
																<span>{{item.investorsWork}} </span>
														</div>
												</div>
												<div>
														<i :class="index == index1? 'el-icon-arrow-up':'el-icon-arrow-down'"></i>
												</div>
										</div>
										<div class="Speed">
												<span :class="item.bookingStatus == 0 ? 'activ' : '' ">待受理{{item.bookingStatus}}</span>
												<span :class="item.bookingStatus == 1 ? 'activ' : '' ">受理中</span>
												<span :class="item.bookingStatus == 2 ? 'activ' : '' ">预约成功</span>
												<span :class="item.bookingStatus == 3 ? 'activ' : '' ">订单进行中</span>
												<span :class="item.bookingStatus == 4 ? 'activ' : '' ">订单完成</span>
										</div>
										<ul class="listUl" v-show="index == index1 " >
												<li>
														<span>时间商品</span>
														<span>{{}}</span>
												</li>
												<li>
														<span>下单时间</span>
														<span>{{item.createTime}}</span>
												</li>
												<li>
														<span>商品价格</span>
														<span>{{item.averPrice}}</span>
												</li>
												<li>
														<span>当前进度</span>
														<span>{{arrJD[item.bookingStatus]}}</span>
												</li>
										</ul>
										<div class="cancel">
												<span>订单编号：{{item.bookingOrderNo}}</span>
												<button @click="wdel(index,item.bookingId)">取消订单</button>
										</div>
								</div>
						</div>
				</div>
		</div>
</template>

<script>
		import Head from "@/components/mine/headMe"
		import { MessageBox,Toast } from 'mint-ui';
		import MeScroll from 'mescroll.js'
    export default {
        name: "timeDD",
				data(){
        		return {
        				flag:false,
								til:["时间商品订单"],
								mescroll:null,
								arrJD:['待受理','受理中','预约成功','订单进行中','订单完成'],
								dataList:[],
								index1:-1,
								token:'',
						}
				},
				mounted(){
        		this.token = sessionStorage.getItem('userName');
        		// this.dataJson();
						//创建MeScroll对象,down可以不用配置,因为内部已默认开启下拉刷新,重置列表数据为第一页
						//解析: 下拉回调默认调用mescroll.resetUpScroll(); 而resetUpScroll会将page.num=1,再执行up.callback,从而实现刷新列表数据为第一页;
						var self = this;
						self.mescroll = new MeScroll("mescroll", { //请至少在vue的mounted生命周期初始化mescroll,以确保您配置的id能够被找到
								up: {
										callback: self.upCallback, //上拉回调
										//以下参数可删除,不配置
										isBounce: false, //此处禁止ios回弹,解析(务必认真阅读,特别是最后一点): http://www.mescroll.com/qa.html#q10
										//page:{size:8}, //可配置每页8条数据,默认10
										toTop:{ //配置回到顶部按钮
												src : require('../../../assets/img/toTop.png'), //默认滚动到1000px显示,可配置offset修改
												// html: null, //html标签内容,默认null; 如果同时设置了src,则优先取src
												offset : 1000,
												warpClass : "mescroll-totop" ,
												showClass : "mescroll-fade-in" ,
												hideClass : "mescroll-fade-out" ,
										},
										empty:{ //配置列表无任何数据的提示
												warpId:"dataList",
												icon : "../res/img/mescroll-empty.png" ,
//						  	tip : "亲,暂无相关数据哦~" ,
//						  	btntext : "去逛逛 >" ,
//						  	btnClick : function() {
//						  		alert("点击了去逛逛按钮");
//						  	}
										},
										htmlNodata:'<p class="upwarp-nodata">-- 没有更多数据 -- </p>'  //无数据布局
										//vue的案例请勿配置clearId和clearEmptyId,否则列表的数据模板会被清空
										//vue的案例请勿配置clearId和clearEmptyId,否则列表的数据模板会被清空
//						clearId: "dataList",
//						clearEmptyId: "dataList"
								}
						});

				},
				methods:{
        		// 下拉
						downCallback(){
								console.log(1)
						},
						//上啦
						upCallback(page){
										//联网加载数据
										var self = this;
										this.getListDataFromNet(page.num, page.size, function(curPageData) {
												curPageData=[]; //打开本行注释,可演示列表无任何数据empty的配置

												//如果是第一页需手动制空列表 (代替clearId和clearEmptyId的配置)
												if(page.num == 1) self.dataList = [];

												//更新列表数据
												self.dataList = self.dataList.concat(curPageData);

												//联网成功的回调,隐藏下拉刷新和上拉加载的状态;
												//mescroll会根据传的参数,自动判断列表如果无任何数据,则提示空;列表无下一页数据,则提示无更多数据;
												console.log("page.num="+page.num+", page.size="+page.size+", curPageData.length="+curPageData.length+", self.pdlist.length==" + self.dataList.length);

												//方法一(推荐): 后台接口有返回列表的总页数 totalPage
												//self.mescroll.endByPage(curPageData.length, totalPage); //必传参数(当前页的数据个数, 总页数)

												//方法二(推荐): 后台接口有返回列表的总数据量 totalSize
												//self.mescroll.endBySize(curPageData.length, totalSize); //必传参数(当前页的数据个数, 总数据量)

												//方法三(推荐): 您有其他方式知道是否有下一页 hasNext
												//self.mescroll.endSuccess(curPageData.length, hasNext); //必传参数(当前页的数据个数, 是否有下一页true/false)

												//方法四 (不推荐),会存在一个小问题:比如列表共有20条数据,每页加载10条,共2页.如果只根据当前页的数据个数判断,则需翻到第三页才会知道无更多数据,如果传了hasNext,则翻到第二页即可显示无更多数据.
												self.mescroll.endSuccess(curPageData.length);

										}, function() {
												//联网失败的回调,隐藏下拉刷新和上拉加载的状态;
												self.mescroll.endErr();
										});
						},
						//显隐藏示
						listClick(index){
								if(this.index1 == -1){
										this.index1 = index;
								}else{
										this.index1 = -1;
								}

						},
						// dataJson(){
						// 		this.$axios.post(url+'/miao/queryBookings.do',this.$qs.stringify({
						// 				token:this.token,
						// 				currentPage:'1',  //当前分页数
						// 				pageSize:'6',     //每页的大小
						// 		})).then((res) => {
						// 				console.log(res.data);
						// 				this.dataList = res.data.LIST
						// 		})
						// },
						//		取消订单
						wdel(index,id){
								MessageBox.confirm('确定删除这笔订单吗?',"").then(action => {
										console.log(index +'-----'+ id);
										this.$axios.post(url+'/miao/cancelBooking.do',this.$qs.stringify({
												token:this.token,
												bookingId:id,
										})).then((res) => {
												console.log(res.data);
												if(res.data.STATUS == 0){
														this.dataList.splice(index,1);
														Toast({
																message: '删除成功',
																position: 'bottom',
														});
												}
										})
								}, action => {
										console.log("取消")
								})
						},
						getListDataFromNet(pageNum,pageSize,successCallback,errorCallback) {
								//延时一秒,模拟联网
								setTimeout(() => {
										this.$axios.post(url+'/miao/queryBookings.do',this.$qs.stringify({
												token:this.token,
												currentPage:pageNum,  //当前分页数
												pageSize:pageSize,     //每页的大小
										})).then((res) => {
												console.log(res.data);
												if(res.data.LIST.length == 0){
														successCallback&&successCallback();//成功回调
												}else{
														let dataList = res.data.LIST;
														successCallback&&successCallback(dataList);//成功回调
												}
										}).catch(function(error) {
												errorCallback&&errorCallback()//失败回调
										});
//          	axios.get("xxxxxx", {
//					params: {
//						num: pageNum, //页码
//						size: pageSize //每页长度
//					}
//				})
//				.then(function(response) {
// 										var data=pdlist1; // 模拟数据: ../res/pdlist1.js
// 										var listData=[];//模拟分页数据
// 										for (var i = (pageNum-1)*pageSize; i < pageNum*pageSize; i++) {
// 												if(i==data.length) break;
// 												listData.push(data[i]);
// 										}

//				})

								},500)
						}
				},
				components:{
						Head,
				}
		}
</script>

<style scoped lang="scss">
		/*mescroll滚动的区域*/
		.mescroll {
				position: fixed;
				top: .5rem;
				bottom: 0;
				height: auto;
		}
		.list{
				border-bottom: 4px solid #eee;
		}
		.listTop{
				display: flex;
				justify-content: space-between;
				align-items: center;
				border-bottom: 1px solid #eee;
				padding: 0 .15rem;
				height: .7rem;
				.left{
						display: flex;
						justify-content: space-between;
						align-items: center;
						img{
								width: .5rem;
								height: .5rem;
								border-radius: 50%;
								margin-right: .1rem;
						}
						p{
								color: #FF5558;
								line-height: .25rem;
						}
						span{
								font-size: .12rem;
								color: #999;
								line-height: .25rem;
						}
				}
		}
		.Speed{
				height: .4rem;
				display: flex;
				justify-content: space-between;
				padding: 0 .15rem;
				border-bottom: 1px solid #eee;
				color: #999;
				span{
						font-size: .1rem;
						line-height: .4rem;
						position: relative;
				}
				.activ{
						color: #FF5558;
				}
				span:not(:nth-child(5)):after{
						content: "";
						position: absolute;
						width: .26rem;
						height: 1px;
						top: .18rem;
						border-left: .2rem solid #999;
				}
				span:nth-child(1):after,span:nth-child(2):after{
						left: .4rem;
				}
				span:nth-child(3):after{
						left: .51rem;
				}
				span:nth-child(4):after{
						left: .62rem;
				}
		}
		.cancel{
				height: .5rem;
				display: flex;
				justify-content: space-between;
				align-items: center;
				padding: 0 .15rem;
				font-size: .12rem;
				color: #999;
				button{
						width: .6rem;
						height: .28rem;
						background: #d0d0d0;
						color: #fff;
						font-size: .1rem;
						border:none ;
				}
		}

		.listUl{
				padding: 0 .15rem;
				border-bottom: 1px solid #eee;
				li{
						display: flex;
						justify-content: space-between;
						line-height: .3rem;
						font-size: .12rem;
				}
		}


		.nothing{
				div{
						text-align: center;
						padding-top: 1.7rem;
				}
				img{
						width: 1.4rem;
						height: 1.4rem;
				}
				p{
						color: #aaa;
				}
		}

</style>