<template>
    <!--上新-->
		<div class="upnew">
				<div class="nav">
						<div class="text1" @click="back"><i class="el-icon-arrow-left"></i></div>
						<div class="til">投票上新</div>
						<div class="text" @click="guize">规则</div>
				</div>
				<div class="time">
						<p>{{txt}}</p>
						<ul>
								<li>
										<p>{{day}}</p>
										<span>日</span>
								</li>
								<li>
										<p>{{hour}}</p>
										<span>时</span>
								</li>
								<li>
										<p>{{min}}</p>
										<span>分</span>
								</li>
								<li>
										<p>{{sec}}</p>
										<span>秒</span>
								</li>
						</ul>
						<div class="tabList">
								<div>排名</div>
								<div>发行人</div>
								<div>星光支持</div>
						</div>
				</div>
				<div class="conList">
						<div v-for="(item,index) in dataList">
								<div class="num-shu">{{index+1}}</div>
								<div class="til-name">
										<img class="img" :src="item.issuerDatabase.headPortraitImgPath" alt="">
										<label>{{item.issuerDatabase.issuerName}}</label>
										<i class="iconfont icon-fans" v-show="true"></i>
										<i class="iconfont icon-touPiao" v-show="false"></i>
								</div>
								<div class="num">
										<img src="../../assets/img/news/giveStar@2x.png" alt="">
										{{item.sumBallot}}
								</div>
								<div class="btn" @click="songBtn(index)">送星光</div>
								<div class="titl iconfont icon-corner" v-show="index === 0">
										<img src="../../assets/img/home/vote_theFirst@2x.png" alt="">
								</div>
						</div>
				</div>
		</div>
</template>

<script>
		import { MessageBox } from 'mint-ui';
    export default {
        name: "upNew",
				data(){
        		return{
        				dataList:[],
								token:'',
								txt:'',
								day:'00',
								issuerName:'',
								hour:'00',
								min:'00',
								sec:'00',
								user_num:'',
								name:'22'
						}
				},
				mounted(){
        	  this.token = sessionStorage.getItem('userName');
        	  this.getJson();
				},
				methods:{
						back(){
								this.$router.go(-1);
						},
						//时间倒计时
						setTimer(stateTime,endTime){
								let self = this;
								let timer = setInterval(function(){
										//现在的时间
										let time = new Date().getTime();
										// console.log(time);
										//开始时间小于现在时间  结束时间大于现在时间
										if(stateTime < time && endTime > time){
												self.txt = '距投票结束剩余时间';
												// console.log(endTime-time);
												let t = endTime-time;
												if(t > 0){
														self.tiemPblic(t)
												}else{
														clearInterval(timer);
												}
										}else if(stateTime > time){
												//开始时间大于现在时间
												self.txt = '距投票开始剩余时间';
												let t = stateTime-time;
												if(t > 0){
														self.tiemPblic(t)
												}else{
														clearInterval(timer);
												}
										}else if(endTime< time){
												// 结束时间小于现在时间
												self.txt = '投票时间已结束';
										}
								},1000);
						},
						tiemPblic(t){
								let day = Math.floor(t/86400000);
								let hour=Math.floor((t/3600000)%24);
								let min=Math.floor((t/60000)%60);
								let sec=Math.floor((t/1000)%60);
								self.day = day < 10 ? "0" + day : day;
								self.hour = hour < 10 ? "0" + hour : hour;
								self.min = min < 10 ? "0" + min : min;
								self.sec = sec < 10 ? "0" + sec : sec;
						},
						getJson(){
								this.$axios.post('/api/api/voteUpNew/findVoteUpNew',this.$qs.stringify({
										token:this.token
								})).then((res) => {
										console.log(res.data);
										this.dataList = res.data.voteUpNew.votePeopleList;
										console.log(this.dataList);
										console.log(res.data.voteUpNew);
										console.log(res.data.voteUpNew.voteStartTime);
										// console.log(new Date(res.data.voteUpNew.voteStartTime).getTime());
										let StartTime = new Date(res.data.voteUpNew.voteStartTime).getTime();
										let EndTime = new Date(res.data.voteUpNew.voteEndTime).getTime();
										this.setTimer(StartTime,EndTime)
								}).catch((err) => {
										console.log(err);
								})
						},
						//弹框规则
						guize() {
								const h = this.$createElement;
								this.$msgbox({
										title: '投票上新规则',
										showClose:false,
										confirmButtonClass:'el-btn',  //确定按钮的自定义类名
										confirmButtonText:'我知道了',  //确定按钮的文本内容
										message: h('p', { style: 'font-size: .14rem' }, [
												h("div",{ style: 'display: flex' },[
														h('span', { style: 'margin-right: .1rem' }, ' 1.'),
														h('span', { style: 'color: #101010' }, '每轮投票结束后，星光数量最多的发行人开启下一轮申购，星光数量最少的发行人将不再发行，其余发行人和新进的2位发行人进行下一轮投票'),
												]),
												h("div",{ style: 'display: flex' },[
														h('span', { style: 'margin-right: .1rem' }, ' 2.'),
														h('span', { style: 'color: #101010' }, '如果您投票的发行人未进入申购，在投票结束后，星光退回您的账户'),
												]),
										]),
										showCancelButton: false,
								})
						},
						//送星光弹出
						songBtn(index){
								let title = '';
								let message = '送给 <span class="msg">'+ this.dataList[index].issuerDatabase.issuerName+'</span>';
								MessageBox.prompt(message,title,'number').then(({ value, action }) => {

								});
								this.$axios.post('/api//api/user/getUserInfo',this.$qs.stringify({
										token:this.token
								})).then((res) => {
										console.log(res);

								})
						}
				}
    }
</script>
<style>
		.el-message-box{
				width: 80%;
		}
		.el-message-box__header,.el-message-box__btns{
				text-align: center;
		}
		.el-message-box__title{
				font-size: .15rem;
				color: #333;
				line-height: 2;
				font-weight: bold;
		}

		.el-button--primary {
				color: #FF5558;
				background-color: #fff;
				border-color: #fff;
		}
		.el-btn{
				background: #fff;
				color: #FF5558;
				border: none;
				line-height: .3rem;
				font-size: .14rem;
		}
		.el-button--primary:focus, .el-button--primary:hover,.el-button:focus, .el-button:hover {
				background: #fff;
				border-color: #fff;
				color: #FF5558;
		}
		.msg{
				color:  #FF5558;
		}
</style>
<style scoped lang="scss">
		.nav{
				height: .5rem;
				display: flex;
				background: #ff5558;
				justify-content: space-between;
				padding: 0 .1rem;
				align-items: center;
				color: #fff;
				font-size: 0.14rem;
				.text1{
						font-size: .18rem;
				}
				.til{
						font-size: .16rem;
				}
		}
		.time{
				background-image: linear-gradient(-180deg, #FF5558 0%, #859BF4 100%);
				height: 1.5rem;
				>p{
						color: #ffffff;
						line-height: .42rem;
						height: .42rem;
						text-align: center;
				}
				ul{
						display: flex;
						justify-content: center;
						align-items: center;
						color: #fff;
						li{
								border-radius: 4px;
								position: relative;
								width: .5rem;
								margin: 0 .1rem;
								height: .58rem;
								background: #fff;
								color: #012445;
								text-align: center;
								p{
										font-size: .2rem;
										line-height: .36rem;
								}
						}
						li:not(:nth-child(4))::after{
								content: ":";
								position: absolute;
								width: .1rem;
								top: 15%;
								right: -.15rem;
								color: #fff;
								font-size: .3rem;
						}
				}
				.tabList{
						display: flex;
						padding: 0 .15rem;
						height: .3rem;
						color: #fff;
						margin-top: .2rem;
						line-height: .3rem;
						background: rgba(0,0,0,.2);
						div{
								font-size: .12rem;
						}
						div:nth-child(1){
								margin-right: .2rem;
						}
						div:nth-child(2){
								margin-right: 1.3rem;
						}
				}
		}
		.conList{
				>div{
						display: flex;
						padding: 0 .15rem;
						align-items: center;
						justify-content: space-between;
						border-bottom: 1px solid #eee;
						.num-shu{
								width: 5%;
								text-align: center;
						}
						.til-name{
								width: 50%;
								overflow: hidden;
						}
						.img{
								width: .4rem;
								height: .4rem;
								border-radius: 50%;
								margin-right: 2px;
								/*border: 1px solid red;*/
								vertical-align: middle;
						}
						.num{
								display: flex;
								align-items: center;
								img{
										width: .18rem;
										height: .18rem;
								}
						}
						.btn{
								width: .5rem;
								height: .2rem;
								border-radius: 5px;
								border: 1px solid #FF5558;
								text-align: center;
								color: #FF5558;
								line-height: .2rem;
								font-size: .1rem;
								cursor: pointer;
						}
						.icon-fans{
								color: #FF5558;
						}
						.icon-touPiao{
								color: #F5A623;
						}
						.i{
								font-size: .18rem;
								vertical-align: middle;
						}
				}
				>div:nth-child(1){
						position: relative;
						height: .8rem;
						color: #FF5558;
						background-image: linear-gradient(0deg, #F4DE85 0%, rgba(244,222,133,0.60) 100%);
				}
				.titl{
						position: absolute;
						top: -2px;
						left: 0;
						font-size: .5rem;
						img{
								position: absolute;
								left: 0;
								top: 0;
								width: .3rem;
								height: .3rem;
						}
				}
				>div:not(:nth-child(1)){
						height: .6rem;

				}
		}
</style>
